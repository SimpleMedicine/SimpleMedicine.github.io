<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cmake笔记</title>
    <link href="/2022/02/03/cmake/"/>
    <url>/2022/02/03/cmake/</url>
    
    <content type="html"><![CDATA[<p>Cmake笔记</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官网下载source file，解压，cd进文件夹，./bootstrap，make，make install<br>cmake -version验证安装版本<br>ln -s file_path link_path建立软连接( 如果/usr/local/bin下面没有cmake )</p><h1 id="第一个Cmake"><a href="#第一个Cmake" class="headerlink" title="第一个Cmake"></a>第一个Cmake</h1><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># CMakeLists.txt</span><br>cmake_minimun_required (VERSION <span class="hljs-number">2.8</span>)<br>projrct (cmake_demo)<br><span class="hljs-keyword">add_executable</span>(main main.c)<br></code></pre></td></tr></table></figure><ul><li>cmake_minimun_required (VERSION 2.8)</li></ul><p>指定当前工程最低cmake版本要求</p><ul><li>projrct (cmake_demo)</li></ul><p>指定当前工程的名字</p><ul><li>add_executable(main main.c)</li></ul><p>指定当前工程的elf文件名字和源文件</p><h1 id="编译Cmake"><a href="#编译Cmake" class="headerlink" title="编译Cmake"></a>编译Cmake</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake .<br>make<br>./main<br></code></pre></td></tr></table></figure><p>生成CMakeFiles文件<br>编译项目<br>运行二进制文件</p><h1 id="多目录环境Cmake"><a href="#多目录环境Cmake" class="headerlink" title="多目录环境Cmake"></a>多目录环境Cmake</h1><p>当一个项目变得复杂时，对相关文件夹类型的管理显得尤为重要</p><p>当前文件结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">.<br>- bin<br>- build<br>- include<br>  - testFunc.h<br>  - testFunc1.h<br>- src<br>  - main.c<br>  - testFunc.c<br>  - testFunc1.c<br>- CMakeLists.txt<br></code></pre></td></tr></table></figure><p>对于顶层目录下的CMakeLists.txt：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span> (VERSION <span class="hljs-number">2.8</span>)<br><br><span class="hljs-keyword">project</span> (demo)<br><br><span class="hljs-keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><br><span class="hljs-keyword">include_directories</span> (<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_compile_options</span>(-std=c++<span class="hljs-number">11</span>)<br><br><span class="hljs-keyword">aux_source_directory</span> (src SRC_LIST)<br><span class="hljs-keyword">add_executable</span> (main <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br></code></pre></td></tr></table></figure><ul><li>cmake_minimum_required (VERSION 2.8)</li></ul><p>项目最低cmake版本要求</p><ul><li>project (demo)</li></ul><p>设置项目名称</p><ul><li>set (EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)</li></ul><p>设置二进制文件保存路径，EXECUTABLE_OUTPUT_PATH 和 PROJECT_SOURCE_DIR都是CMake环境下预定义变量名称</p><ul><li>include_directories (include)</li></ul><p>库文件夹路径</p><ul><li>aux_source_directory (src SRC_LIST)</li></ul><p>源文件夹路径</p><ul><li>add_executable (main ${SRC_LIST})</li></ul><p>设置可执行文件名</p><ul><li>add_compile_options(-std=c++11)</li></ul><p>添加编译选项</p><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><ul><li><p>编译</p><p>  在build目录下生成cmake文件并编译，因为此做法可以保证将编译出来的乱七八糟的CMake文件都保存在build文件夹下，在工程上保持优雅</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure></li><li><p>运行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ../bin<br>./main<br></code></pre></td></tr></table></figure></li></ul><h1 id="动态库静态库的编译和链接"><a href="#动态库静态库的编译和链接" class="headerlink" title="动态库静态库的编译和链接"></a>动态库静态库的编译和链接</h1><h2 id="编译库"><a href="#编译库" class="headerlink" title="编译库"></a>编译库</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span> (VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-keyword">project</span>(dynamic_lib)<br><br><span class="hljs-keyword">set</span>(SRC_LIST <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/testFunc.c)<br><br><span class="hljs-comment">## add_library(LIB_NAME LIB_STATE SOURCE)</span><br><span class="hljs-comment"># LIB_NAME:  库名称</span><br><span class="hljs-comment"># LIB_STATE: 库类型(SHARED动态库 STATIC静态库)</span><br><span class="hljs-comment"># SOURCE:    源文件</span><br><span class="hljs-keyword">add_library</span>(testFunc_shared SHARED <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><span class="hljs-keyword">add_library</span>(testFunc_static STATIC <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-comment"># 设置最终生成的库的名称</span><br><span class="hljs-keyword">set_target_properties</span>(testFunc_shared PROPERTIES OUTPUT_NAME <span class="hljs-string">&quot;testFunc&quot;</span>)<br><span class="hljs-keyword">set_target_properties</span>(testFunc_static PROPERTIES OUTPUT_NAME <span class="hljs-string">&quot;testFunc&quot;</span>)<br><br><span class="hljs-comment"># 库文件默认的输出路径</span><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><p>完事儿之后就能在/lib文件夹下看到编译成功的动态库和静态库文件</p><p><img src="https://s2.loli.net/2022/02/03/OKLaR4xlJWA2ksU.png" alt="生成的动态库和静态库文件.png"></p><h2 id="链接库"><a href="#链接库" class="headerlink" title="链接库"></a>链接库</h2><p>当前项目下的文件结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">.<br>- bin<br>- build<br>- CMakeLists.txt<br>- src<br>  - main.c<br>- testFunc<br>  - inc<br>    - testFunc.h<br>  - lib<br>    - libtestFunc.a<br>    - libtestFunc.so<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-keyword">project</span>(demo)<br><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<br><br><span class="hljs-keyword">set</span>(SRC_LIST <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c)<br><br><span class="hljs-keyword">add_executable</span>(main <span class="hljs-variable">$&#123;SRC_LIST&#125;</span>)<br><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/inc)<br><br><span class="hljs-comment"># 在指定目录下查找指定库, 指定库名称要大写</span><br><span class="hljs-keyword">find_library</span>(TESTFUNC_LIB testFunc HINTS <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/lib)<br><br><span class="hljs-comment"># 目标文件链接库文件</span><br><span class="hljs-keyword">target_link_libraries</span>(main <span class="hljs-variable">$&#123;TESTFUNC_LIB&#125;</span>)<br></code></pre></td></tr></table></figure><ul><li>find_library(TESTFUNC_LIB testFunc HINTS ${PROJECT_SOURCE_DIR}/testFunc/lib)</li></ul><p>这里第二个参数testFunc是库名称，可以理解为用来提高查找库的效率</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/whahu1989/article/details/82078563">CSDN - Linux下CMake简明教程</a></p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro框架(下)--数据持久化</title>
    <link href="/2021/12/22/Shiro%E6%A1%86%E6%9E%B6(%E4%B8%8B)--%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/2021/12/22/Shiro%E6%A1%86%E6%9E%B6(%E4%B8%8B)--%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>通过Redis对权限进行管理</p><p>项目完整代码github地址: <a href="https://github.com/SimpleMedicine/Shiro">https://github.com/SimpleMedicine/Shiro</a></p><span id="more"></span><h1 id="设计数据库表"><a href="#设计数据库表" class="headerlink" title="设计数据库表"></a>设计数据库表</h1><p>为了实现权限管理，需要设计多张数据表来存储用户，角色，权限，资源之间的关系</p><blockquote><p>用户 n—&gt;n 角色 1—&gt;n 权限 1—&gt;1 资源</p></blockquote><p><img src="https://s2.loli.net/2022/01/21/QxnX7UvZ2lHrmYb.png" alt="表结构.png"></p><p>建表sql语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : localhost</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 80023</span><br><span class="hljs-comment"> Source Host           : localhost:3306</span><br><span class="hljs-comment"> Source Schema         : shiro</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 80023</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 22/12/2021 13:32:51</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_pers</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_pers`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_pers`  (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `url` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;权限表&#x27;</span> ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_role`  (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;角色表&#x27;</span> ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_role_perms</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_role_perms`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_role_perms`  (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `roleid` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `permid` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;角色和权限之间的关系&#x27;</span> ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_user`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user`  (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `salt` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_user_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_user_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user_role`  (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `userid` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `roleid` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户和角色之间的关系&#x27;</span> ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h1 id="实现授权功能"><a href="#实现授权功能" class="headerlink" title="实现授权功能"></a>实现授权功能</h1><p>在数据库中拿到用户信息，将用户权限信息添加到SimpleAuthorizationInfo权限管理器中</p><p>实际上，SimpleAuthorizationInfo和SimpleAuthenticationInfo在当前线程中共享一个Context，双方通过它共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 授权</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取用户名</span><br>    String primaryPrincipal = (String) principals.getPrimaryPrincipal();<br>    <span class="hljs-comment">// 查询用户角色</span><br>    User user = userService.findRolesByUserName(primaryPrincipal);<br>    <span class="hljs-keyword">if</span>(!CollectionUtils.isEmpty(user.getRoles()))&#123;<br>        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();<br>        <span class="hljs-comment">// 遍历添加角色信息</span><br>        user.getRoles().forEach(role -&gt; &#123;<br>            simpleAuthorizationInfo.addRole(role.getName());<br>            <span class="hljs-comment">// 查询用户权限</span><br>            List&lt;Perms&gt; permsList = userService.findPermsByRoleId(role.getId());<br>            <span class="hljs-keyword">if</span>(!CollectionUtils.isEmpty(permsList))&#123;<br>                <span class="hljs-comment">// 遍历添加权限信息</span><br>                permsList.forEach(perm -&gt; &#123;<br>                    simpleAuthorizationInfo.addStringPermission(perm.getName());<br>                &#125;);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：1个用户对应多个角色，1个角色对应多个权限，所以通过双循环来遍历获得改用户的所有权限</p><p>在前端界面控制显示的界面元素：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;%--引入Shiro标签--%&gt;<br>&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;shiro&quot;</span> uri=<span class="hljs-string">&quot;http://shiro.apache.org/tags&quot;</span>%&gt;<br>&lt;!doctype html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;index&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;系统主页V1<span class="hljs-number">.0</span>&lt;/h1&gt;<br>    &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;退出用户&lt;/a&gt;<br><br>    &lt;ul&gt;<br>        &lt;%--user或者admin都能看到--%&gt;<br>        &lt;shiro:hasAnyRoles name=<span class="hljs-string">&quot;user,admin&quot;</span>&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;用户管理&lt;/a&gt;<br>                &lt;ul&gt;<br>                    &lt;%--user对所有资源具有add操作权限--%&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:add:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;添加&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:delete:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;删除&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:update:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;修改&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;order:find:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;查询&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                &lt;/ul&gt;<br>            &lt;/li&gt;<br>        &lt;/shiro:hasAnyRoles&gt;<br>        &lt;%--具有admin角色才能看见--%&gt;<br>        &lt;shiro:hasRole name=<span class="hljs-string">&quot;admin&quot;</span>&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;商品管理&lt;/a&gt;&lt;/li&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;订单管理&lt;/a&gt;&lt;/li&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;物流管理&lt;/a&gt;&lt;/li&gt;<br>        &lt;/shiro:hasRole&gt;<br>    &lt;/ul&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>此时经过权限管理后的前端界面：</p><p><img src="https://s2.loli.net/2022/01/21/FHNQn8AqZeVrs9U.jpg" alt="界面权限控制.jpg"></p><p>而zhangsan用户只是user+product，只能看到指定的内容：</p><p><img src="https://s2.loli.net/2022/01/21/7S2MfTJ894YQCeN.jpg" alt="张三能看到的界面.jpg"></p><h1 id="EhCache缓存的实现"><a href="#EhCache缓存的实现" class="headerlink" title="EhCache缓存的实现"></a>EhCache缓存的实现</h1><p>避免认证授权时频繁地操作数据库</p><h2 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h2><p>首先引入encache依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--ShiroEhcache--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置realm"><a href="#配置realm" class="headerlink" title="配置realm"></a>配置realm</h2><p>再ShiroConfig配置类中，开启EnCache缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 3.创建自定义realm</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 自定义realm</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Realm <span class="hljs-title">getRealm</span><span class="hljs-params">()</span></span>&#123;<br>    CustomerRealm customerRealm = <span class="hljs-keyword">new</span> CustomerRealm();<br>    <span class="hljs-comment">// 修改凭证校验匹配器(默认是equals匹配)</span><br>    HashedCredentialsMatcher credentialsMatcher = <span class="hljs-keyword">new</span> HashedCredentialsMatcher();<br>    <span class="hljs-comment">// 设置加密算法为md5</span><br>    credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;MD5&quot;</span>);<br>    <span class="hljs-comment">// 设置散列次数</span><br>    credentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);<br>    customerRealm.setCredentialsMatcher(credentialsMatcher);<br><br>    <span class="hljs-comment">// 开启缓存管理</span><br>    customerRealm.setCacheManager(<span class="hljs-keyword">new</span> EhCacheManager());<br>    customerRealm.setCachingEnabled(<span class="hljs-keyword">true</span>);  <span class="hljs-comment">// 开启全局缓存</span><br>    customerRealm.setAuthenticationCachingEnabled(<span class="hljs-keyword">true</span>);                <span class="hljs-comment">// 开启认证缓存</span><br>    customerRealm.setAuthenticationCacheName(<span class="hljs-string">&quot;authenticationCache&quot;</span>);    <span class="hljs-comment">// 设置认证缓存名字</span><br>    customerRealm.setAuthorizationCachingEnabled(<span class="hljs-keyword">true</span>);                 <span class="hljs-comment">// 开启授权缓存</span><br>    customerRealm.setAuthenticationCacheName(<span class="hljs-string">&quot;authorizationCache&quot;</span>);     <span class="hljs-comment">// 设置授权缓存名字</span><br><br>    <span class="hljs-keyword">return</span> customerRealm;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encache缺点"><a href="#Encache缺点" class="headerlink" title="Encache缺点"></a>Encache缺点</h2><p>Encache缓存可以提高数据访问的速度，但是Encache数据保存在本地内存中，如果系统断电会导致内存中的缓存丢失，所以采用Redis分布式缓存是一个更加好的缓存方案</p><h1 id="Springboot-Redis-Shiro"><a href="#Springboot-Redis-Shiro" class="headerlink" title="Springboot+Redis+Shiro"></a>Springboot+Redis+Shiro</h1><h2 id="引入Redis依赖"><a href="#引入Redis依赖" class="headerlink" title="引入Redis依赖"></a>引入Redis依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>连接服务器Redis</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># remote redis config</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">xxx.xxx.xxx.xxx</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">xxxxxxxx</span><br></code></pre></td></tr></table></figure><h2 id="更改缓存管理器"><a href="#更改缓存管理器" class="headerlink" title="更改缓存管理器"></a>更改缓存管理器</h2><p>在Shiro配置类中，我们需要把Realm的缓存管理器实现更改为自己的缓存管理器，所以就有：</p><ol><li>实现自定义的Redis缓存管理器</li><li>更改Realm缓存管理器实现</li></ol><p><img src="https://s2.loli.net/2022/01/21/la4OGmdSvyBcDCk.png" alt="使用自己实现的Redis缓存管理器.png"></p><p>接下来看Redis缓存管理器是如何实现的：</p><h2 id="实现Redis缓存管理器"><a href="#实现Redis缓存管理器" class="headerlink" title="实现Redis缓存管理器"></a>实现Redis缓存管理器</h2><p>在底层源码中我们不难发现缓存管理器的实现都是基于Cache接口，遂我们实现这个接口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.shiro.cache;<br><br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.utils.ApplicationContextUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.Cache;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.CacheException;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义缓存实现 -&gt; Redis缓存实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-24 20:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisCache</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Cache</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String cacheName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedisCache</span><span class="hljs-params">(String cacheName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cacheName = cacheName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(K k)</span> <span class="hljs-keyword">throws</span> CacheException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get key:&quot;</span> + <span class="hljs-keyword">this</span>.cacheName + k.toString());<br>        <span class="hljs-keyword">return</span> (V) getRedisTemplate().opsForHash().get(<span class="hljs-keyword">this</span>.cacheName, k.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K k, V v)</span> <span class="hljs-keyword">throws</span> CacheException </span>&#123;<br>        getRedisTemplate().opsForHash().put(<span class="hljs-keyword">this</span>.cacheName, k.toString(), v);<br>        System.out.println(<span class="hljs-string">&quot;put value:&quot;</span> + v);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">remove</span><span class="hljs-params">(K k)</span> <span class="hljs-keyword">throws</span> CacheException </span>&#123;<br>        <span class="hljs-keyword">return</span> (V) getRedisTemplate().opsForHash().delete(<span class="hljs-keyword">this</span>.cacheName, k.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CacheException </span>&#123;<br>        getRedisTemplate().delete(<span class="hljs-keyword">this</span>.cacheName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getRedisTemplate().opsForHash().size(<span class="hljs-keyword">this</span>.cacheName).intValue();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title">keys</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getRedisTemplate().opsForHash().keys(<span class="hljs-keyword">this</span>.cacheName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;V&gt; <span class="hljs-title">values</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getRedisTemplate().opsForHash().values(<span class="hljs-keyword">this</span>.cacheName);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> RedisTemplate <span class="hljs-title">getRedisTemplate</span><span class="hljs-params">()</span></span>&#123;<br>        RedisTemplate redisTemplate = (RedisTemplate) ApplicationContextUtils.getBeanByName(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        redisTemplate.setStringSerializer(<span class="hljs-keyword">new</span> StringRedisSerializer());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> StringRedisSerializer());<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.shiro.cache;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.cache.Cache;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.CacheException;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.CacheManager;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义的Shiro缓存管理器 -&gt; Redis缓存管理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-24 20:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisCacheManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CacheManager</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cacheName 认证或者是授权缓存的统一名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存键值对</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> CacheException 缓存错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;K, V&gt; <span class="hljs-function">Cache&lt;K, V&gt; <span class="hljs-title">getCache</span><span class="hljs-params">(String cacheName)</span> <span class="hljs-keyword">throws</span> CacheException </span>&#123;<br>        <span class="hljs-comment">// s = authorizationCache</span><br>        System.out.println(<span class="hljs-string">&quot;cacheName=&quot;</span> + cacheName);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RedisCache&lt;K,V&gt;(cacheName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>值得注意的是，三个entity类都要实现序列化接口，并且在自定义Realm类CustomerRealm中，需要调用自己实现的MyByteSource类来对salt进行序列化，因为在序列化的过程中不仅仅是用户数据的序列化，盐的序列化也是十分重要的，否则数据库无法实现对加密后数据的序列化来完成DB持久化操作</p><p><img src="https://s2.loli.net/2022/01/21/D8fEIceHmp1jFRB.png" alt="自己重写一个ByteSource类.png"></p><p>以下是MyByteSource类的具体实现，实际上就是copy了一份ByteSource的源代码。但是网上有人说这个方法以后无法完成反序列化，我暂时还没有遇到这个问题，如果以后遇到了再回来修改一下吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.shiro.util;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.CodecSupport;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Hex;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义salt实现, 实现序列化接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-24 21:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyByteSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ByteSource</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] bytes;<br>    <span class="hljs-keyword">private</span> String cachedHex;<br>    <span class="hljs-keyword">private</span> String cachedBase64;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bytes = bytes;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bytes = CodecSupport.toBytes(chars);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">(String string)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bytes = CodecSupport.toBytes(string);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">(org.apache.shiro.util.ByteSource source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bytes = source.getBytes();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bytes = (<span class="hljs-keyword">new</span> MyByteSource.BytesHelper()).getBytes(file);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyByteSource</span><span class="hljs-params">(InputStream stream)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bytes = (<span class="hljs-keyword">new</span> MyByteSource.BytesHelper()).getBytes(stream);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCompatible</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">byte</span>[] || o <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">char</span>[] || o <span class="hljs-keyword">instanceof</span> String || o <span class="hljs-keyword">instanceof</span> org.apache.shiro.util.ByteSource || o <span class="hljs-keyword">instanceof</span> File || o <span class="hljs-keyword">instanceof</span> InputStream;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getBytes() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.bytes;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.bytes == <span class="hljs-keyword">null</span> || <span class="hljs-keyword">this</span>.bytes.length == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toHex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.cachedHex == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.cachedHex = Hex.encodeToString(<span class="hljs-keyword">this</span>.getBytes());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cachedHex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toBase64</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.cachedBase64 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.cachedBase64 = Base64.encodeToString(<span class="hljs-keyword">this</span>.getBytes());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cachedBase64;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.toBase64();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.bytes != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.bytes.length != <span class="hljs-number">0</span> ? Arrays.hashCode(<span class="hljs-keyword">this</span>.bytes) : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> org.apache.shiro.util.ByteSource) &#123;<br>            org.apache.shiro.util.ByteSource bs = (org.apache.shiro.util.ByteSource)o;<br>            <span class="hljs-keyword">return</span> Arrays.equals(<span class="hljs-keyword">this</span>.getBytes(), bs.getBytes());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BytesHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CodecSupport</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">BytesHelper</span><span class="hljs-params">()</span> </span>&#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getBytes(File file) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.toBytes(file);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getBytes(InputStream stream) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.toBytes(stream);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现验证码功能"><a href="#实现验证码功能" class="headerlink" title="实现验证码功能"></a>实现验证码功能</h2><p>借助验证码工具生成验证码</p><p>首先在Controller提供验证码接口，并再Shiro配置中放行接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取验证码</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RequestMapping(&quot;getImage&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getImg</span><span class="hljs-params">(HttpSession session, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 生产验证码</span><br>    String code = VerifyCodeUtils.generateVerifyCode(<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">// 验证码放入session, 方便后面做认证</span><br>    session.setAttribute(<span class="hljs-string">&quot;code&quot;</span>, code);<br>    <span class="hljs-comment">// 验证码放入图片</span><br>    ServletOutputStream stream = response.getOutputStream();<br>    response.setContentType(<span class="hljs-string">&quot;image/png&quot;</span>);<br>    VerifyCodeUtils.outputImage(<span class="hljs-number">220</span>,<span class="hljs-number">60</span>,stream,code);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/21/Eo4RKPhepgMZHyN.png" alt="放行验证码接口.png"></p><p>修改认证流程，加入验证码验证逻辑，首先验证验证码，再进行账号密码的验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 处理身份认证</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, String code, HttpSession session)</span></span>&#123;<br>    <span class="hljs-comment">// 比较验证码</span><br>    String codes = (String) session.getAttribute(<span class="hljs-string">&quot;code&quot;</span>);<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(codes.equalsIgnoreCase(code))&#123;<br>            <span class="hljs-comment">// 获取主体对象</span><br>            Subject subject = SecurityUtils.getSubject();<br>            subject.login(<span class="hljs-keyword">new</span> UsernamePasswordToken(username,password));<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;验证码错误!&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (UnknownAccountException e)&#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;用户名错误!&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (IncorrectCredentialsException e)&#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;密码错误!&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (RuntimeException e)&#123;<br>        e.printStackTrace();<br>        System.out.println(e.getMessage());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/login.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端加一行代码进行显示（验证码每刷新一次可以更新一次）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    用户名:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>    密码:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;br&gt;<br>    请输入验证码:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;code&quot;</span>&gt;&lt;br&gt;<br>    &lt;img src=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/getImage&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>在登录页面输入验证码和用户信息即可正常登录</p><p><img src="https://s2.loli.net/2022/01/21/LWVis1ROYu4l9Kh.png" alt="验证码登录界面验证.png"></p><h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1><p>回顾以下我们都实现了哪些类，他们在Shiro架构中又分别负责了哪些功能：</p><p><img src="https://s2.loli.net/2022/01/21/DghoyJ3Q8cmRC4V.png" alt="ShiroConfig配置类之间的关系.png"></p><p>到这里，关于Shiro安全框架的内容就全部完结了。Shiro框架虽然没有Spring Security框架的强大功能，但是Shiro框架简洁，也能满足大部分的安全管理需求，如果有机会的话以后再更一下Spring Security框架的博文吧，兄弟们下次再见！</p>]]></content>
    
    
    <categories>
      
      <category>安全框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shiro</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro框架(上)--基本使用</title>
    <link href="/2021/12/20/Shiro%E6%A1%86%E6%9E%B6(%E4%B8%8A)--%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/20/Shiro%E6%A1%86%E6%9E%B6(%E4%B8%8A)--%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Shiro框架基本 + SpringBoot整合</p><p>项目完整代码github地址: <a href="https://github.com/SimpleMedicine/Shiro">https://github.com/SimpleMedicine/Shiro</a></p><span id="more"></span><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p>解决系统的权限管理控制</p><ul><li><p>身份认证</p><p>  需要进行身份认证进入系统</p></li><li><p>授权</p><p>  认证过后的用户只能访问自己被授权的资源</p></li></ul><h1 id="Shiro架构图"><a href="#Shiro架构图" class="headerlink" title="Shiro架构图"></a>Shiro架构图</h1><p><img src="https://s2.loli.net/2022/01/21/FOzvxsIpoHCP8DN.png" alt="Shiro架构图.png"></p><ul><li>Security Manager 权限管理器</li><li>Authenticator 登录验证器</li><li>Authorizer 权限管理器</li><li>Session Manager 会话管理器</li><li>Session DAO 会话数据库持久层</li><li>Cache Manager 缓存管理器</li><li>Pluggable Realms 插件式域</li><li>Cryptography 加密数据</li></ul><h1 id="Shiro认证"><a href="#Shiro认证" class="headerlink" title="Shiro认证"></a>Shiro认证</h1><p>Shiro中认证的关键对象：</p><blockquote><p>这三个关键对象可以理解为JWT中的header, payload和signature</p></blockquote><ul><li><p>Subject：主体</p><p>  访问系统的用户</p></li><li><p>Principal：身份信息</p><p>  需要具备唯一性</p></li><li><p>Credential：凭证信息</p><p>  只用主题自己知道的安全信息, 如密码, 证书等等</p></li><li><p>Shiro认证流程：</p></li></ul><p><img src="https://s2.loli.net/2022/01/21/p918HUo6DaqgkZE.jpg" alt="Shiro认证流程.jpg"></p><h1 id="第一个简单ShiroDemo"><a href="#第一个简单ShiroDemo" class="headerlink" title="第一个简单ShiroDemo"></a>第一个简单ShiroDemo</h1><blockquote><p>注意在Shiro中, 配置文件以.ini结尾</p><p>为什么没有用properties?yml?，因为在最初设计时就是设定的ini文件<br>在后面的Springboot项目中不再需要ini配置文件</p></blockquote><ul><li>在pom中引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Shiro依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>在配置文件中写死用户信息（权限数据）</p><p>  在resources目录下</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-attr">xiaochen</span>=<span class="hljs-number">123</span><br><span class="hljs-attr">zhangsan</span>=<span class="hljs-number">123456</span><br><span class="hljs-attr">lisi</span>=<span class="hljs-number">789</span><br></code></pre></td></tr></table></figure><ul><li>Shiro程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.text.IniRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAuthenticator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.创建安全管理器对象</span><br>        DefaultSecurityManager securityManager = <span class="hljs-keyword">new</span> DefaultSecurityManager();<br><br>        <span class="hljs-comment">// 2.给安全管理器设置realm</span><br>        securityManager.setRealm(<span class="hljs-keyword">new</span> IniRealm(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>));<br><br>        <span class="hljs-comment">// 3.SecurityUtils 全局安全工具类, 提供了认证和退出等方法</span><br>        <span class="hljs-comment">// 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br><br>        <span class="hljs-comment">// 4.关键对象Subject主题</span><br>        Subject subject = SecurityUtils.getSubject();<br><br>        <span class="hljs-comment">// 5.创建令牌</span><br>        UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(<span class="hljs-string">&quot;xiaochen&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;认证信息:&quot;</span> + subject.isAuthenticated());<br>            subject.login(token);<br>            System.out.println(<span class="hljs-string">&quot;认证信息:&quot;</span> + subject.isAuthenticated());<br>        &#125;<span class="hljs-keyword">catch</span>(UnknownAccountException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;认证失败: 用户名不存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(IncorrectCredentialsException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;认证失败: 密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终执行用户名校验是在SimpleAccountRealm类中的doGetAuthenticationInfo这个方法中完成用户名的校验</p><p>最终执行密码校验是在AuthenticatingRealm类中的assertCredentialsMatch方法中完成校验的，默认调用equals比较用户信息和token</p><p>自定义Realm在数据库中查询用户是否匹配信息的话，可以在自己实现一个doGetAuthenticationInfo方法。但是密码不需要我们验证，在断言assertCredentialsMatch方法中自动替我们验证</p><blockquote><p>总结：</p><p>AuthenticatingRealm   认证realm   doGetAuthenticationInfo<br>AuthorizingRealm        授权realm   doGetAuthorizationInfo</p><p>SimpleAccountRealm继承AuthorizingRealm继承AuthenticatingRealm<br>真正的验证是通过SimpleAccountRealm类来完成</p><p>账号密码验证流程:</p><p>认证authenticate —&gt; 授权authorize</p></blockquote><h1 id="自定义realm实现自定义验证"><a href="#自定义realm实现自定义验证" class="headerlink" title="自定义realm实现自定义验证"></a>自定义realm实现自定义验证</h1><p>首先自己实现一个Realm，继承AuthorizingRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn;<br><br><span class="hljs-keyword">import</span> com.mdcn.realm.CustomerRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 使用自定义realm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-20 13:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCustomerRealmAuthenticator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DefaultSecurityManager defaultSecurityManager = <span class="hljs-keyword">new</span> DefaultSecurityManager();<br>        defaultSecurityManager.setRealm(<span class="hljs-keyword">new</span> CustomerRealm());<br>        <span class="hljs-comment">// 使用自定义的realm</span><br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        Subject subject = SecurityUtils.getSubject();<br>        UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(<span class="hljs-string">&quot;xiaochen1&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            subject.login(token);<br>            System.out.println(subject.isAuthenticated());<br>        &#125;<span class="hljs-keyword">catch</span> (IncorrectCredentialsException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;error: 密码错误&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (UnknownAccountException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;error: 用户名错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用自定义Realm类实现验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn;<br><br><span class="hljs-keyword">import</span> com.mdcn.realm.CustomerRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 使用自定义realm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-20 13:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCustomerRealmAuthenticator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DefaultSecurityManager defaultSecurityManager = <span class="hljs-keyword">new</span> DefaultSecurityManager();<br>        defaultSecurityManager.setRealm(<span class="hljs-keyword">new</span> CustomerRealm());<br>        <span class="hljs-comment">// 使用自定义的realm</span><br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        Subject subject = SecurityUtils.getSubject();<br>        UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(<span class="hljs-string">&quot;xiaochen1&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            subject.login(token);<br>            System.out.println(subject.isAuthenticated());<br>        &#125;<span class="hljs-keyword">catch</span> (IncorrectCredentialsException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;error: 密码错误&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (UnknownAccountException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;error: 用户名错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>一般用来加密或者签名（校验和），zip，md5等文件都在使用</p><p>特点：MD5算法不可逆，无论内容执行多少次MD5生成结果始终是一致的，可以用来验证内容是否被篡改</p><p>生成结果：始终是一个16进制32位长度字符串</p><p>但是MD5可以通过穷举法破解，加盐可以让算法更复杂，难以破解</p><h1 id="MD5-Salt"><a href="#MD5-Salt" class="headerlink" title="MD5 + Salt"></a>MD5 + Salt</h1><p>原来：md5( “数据” )<br>现在：md5( “数据” + “随机Salt” )，随机盐也不一定拼接在数据的末尾，也可以加在前面或者中间，或者按照一定规则拆分数据散列拼接</p><blockquote><p>没有绝对安全的系统，只能尽最大努力增大拿到密文密码和加密规则的难度<br>不仅要猜明文密码，密文密码，还要猜业务逻辑中的加密规则</p></blockquote><h1 id="Shiro中的MD5认证"><a href="#Shiro中的MD5认证" class="headerlink" title="Shiro中的MD5认证"></a>Shiro中的MD5认证</h1><p>首先自定义一个Realm类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义realm+md5+salt+hash散列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 11:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerMd5Realm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br>    <span class="hljs-comment">// 授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        String principal = (String) token.getPrincipal();<br>        <span class="hljs-comment">// 模拟从数据库中读取到的数据</span><br>        String principle_from_db = <span class="hljs-string">&quot;xiaochen&quot;</span>;<br>        String password_from_db = <span class="hljs-string">&quot;fad0db1ad9f6fef7b3665052cd8210f5&quot;</span>;   <span class="hljs-comment">// 123经过加密的密文</span><br>        <span class="hljs-comment">// 认证通过</span><br>        <span class="hljs-keyword">if</span>(principle_from_db.equals(principal))&#123;<br>            <span class="hljs-comment">/* md5+salt &amp;&amp; md5+salt+hash加密验证 */</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(<br>                    principle_from_db,<br>                    password_from_db,   <span class="hljs-comment">// md5+salt密文</span><br>                    ByteSource.Util.bytes(<span class="hljs-string">&quot;!@#$%&quot;</span>), <span class="hljs-comment">// 随机盐</span><br>                    <span class="hljs-keyword">this</span>.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试自定义类是否能成功验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn;<br><br><span class="hljs-keyword">import</span> com.mdcn.realm.CustomerMd5Realm;<br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 测试自定义realm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 11:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCustomerMd5Realm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DefaultSecurityManager defaultSecurityManager = <span class="hljs-keyword">new</span> DefaultSecurityManager();<br>        <span class="hljs-comment">// 设置hash凭证匹配器</span><br>        <span class="hljs-comment">// hash凭证匹配器会对用户的输入先进行md5加密,</span><br>        <span class="hljs-comment">// 数据库中储存的也是加密后的数据, 所以可以匹配成功</span><br>        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="hljs-keyword">new</span> HashedCredentialsMatcher();<br>        hashedCredentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);   <span class="hljs-comment">// 设置加密算法</span><br>        hashedCredentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);   <span class="hljs-comment">// 设置散列次数</span><br>        <span class="hljs-comment">// 注入realm</span><br>        CustomerMd5Realm realm = <span class="hljs-keyword">new</span> CustomerMd5Realm();<br>        realm.setCredentialsMatcher(hashedCredentialsMatcher);<br>        <span class="hljs-comment">// 注入安全管理器</span><br>        defaultSecurityManager.setRealm(realm);<br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        <span class="hljs-comment">// 认证Subject</span><br>        Subject subject = SecurityUtils.getSubject();<br>        UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(<span class="hljs-string">&quot;xiaochen&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            subject.login(token);<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名错误&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Shiro中的授权"><a href="#Shiro中的授权" class="headerlink" title="Shiro中的授权"></a>Shiro中的授权</h1><p>授权 = Subject 对 Resource 进行 Permission 操作，主题对资源的操作许可</p><p>授权方式RBAC(Role-Based Access Control)</p><ul><li><p>基于角色的访问控制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>))&#123;<br>    <span class="hljs-comment">// 操作什么资源</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>基于资源的访问控制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(subject.isPermission(<span class="hljs-string">&quot;user:find:01&quot;</span>))&#123;<br>    <span class="hljs-comment">// 对所有的用户具有查询功能</span><br>    <span class="hljs-comment">// 格式: 资源标识符:操作:资源实例标识符 -&gt; 对哪个资源的哪个实例具有什么操作</span><br>    <span class="hljs-comment">// user:*:001 用户实例001的所有权限</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义realm+md5+salt+hash散列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 11:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerMd5Realm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 授权</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principals 身份集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回授权信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>&#123;<br>        <span class="hljs-comment">// Subject可以有多个身份, 但是只能有一个主身份, 默认是用户名principle</span><br>        String principle = (String) principals.getPrimaryPrincipal();<br>        System.out.println(<span class="hljs-string">&quot;身份信息:&quot;</span> + principle);<br>        <span class="hljs-comment">// 根据用户名获取当前用户的角色信息, 以及权限信息</span><br>        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();<br>        <span class="hljs-comment">// 将数据库中查询到的权限信息赋值给权限对象</span><br>        simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;admin&quot;</span>);<br>        simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">// 将数据库中查询到的权限字符串赋值给权限对象</span><br>        simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:*:01&quot;</span>);   <span class="hljs-comment">// 只对01用户具有所有权限</span><br>        simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;product:delete:*&quot;</span>);   <span class="hljs-comment">// 对所有product资源具有delete权限</span><br>        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;<br>    &#125;<br><br><span class="hljs-comment">// 省略认证方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>根据权限控制来进行权限管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn;<br><br><span class="hljs-keyword">import</span> com.mdcn.realm.CustomerMd5Realm;<br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 测试自定义realm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 11:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCustomerMd5Realm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 省略认证代码</span><br><br>        <span class="hljs-comment">// authenticate -&gt; authorize -&gt; access</span><br>        <span class="hljs-comment">// 授权已认证用户</span><br>        <span class="hljs-keyword">if</span>(subject.isAuthenticated())&#123;<br>            <span class="hljs-comment">// 基于角色权限控制</span><br>            System.out.println(subject.hasRole(<span class="hljs-string">&quot;user&quot;</span>));<br><br>            <span class="hljs-comment">// 基于多角色权限控制</span><br>            System.out.println(subject.hasAllRoles(Arrays.asList(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>)));<br><br>            <span class="hljs-comment">// 是否具有其中一个角色</span><br>            <span class="hljs-keyword">boolean</span>[] booleans = subject.hasRoles(Arrays.asList(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;unknownRole&quot;</span>));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">boolean</span> bool : booleans)&#123;<br>                System.out.println(bool);<br>            &#125;<br><br>            <span class="hljs-comment">// 基于权限字符串(资源标识符:操作:资源类型实例)的访问控制</span><br>            System.out.println(<span class="hljs-string">&quot;权限:&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;user:*:*&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;权限:&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;user:*:01&quot;</span>));<br><br>            <span class="hljs-comment">// 同时具有哪些权限</span><br>            System.out.println(subject.isPermittedAll(<span class="hljs-string">&quot;user:*:01&quot;</span>, <span class="hljs-string">&quot;product:delete:*&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Shiro-SpringBoot"><a href="#Shiro-SpringBoot" class="headerlink" title="Shiro+SpringBoot"></a>Shiro+SpringBoot</h1><p>以jsp为例，演示Shiro验证和授权的基本流程</p><p>首先是整合思路：</p><p><img src="https://s2.loli.net/2022/01/21/tREOGd8yIbckZAW.jpg" alt="整合思路.jpg"></p><h2 id="搭建Mybatis基本框架"><a href="#搭建Mybatis基本框架" class="headerlink" title="搭建Mybatis基本框架"></a>搭建Mybatis基本框架</h2><p>首先看一下项目结构</p><p><img src="https://s2.loli.net/2022/01/21/yBq7XZobSlD2C8c.jpg" alt="项目结构.jpg"></p><h2 id="实现注册功能"><a href="#实现注册功能" class="headerlink" title="实现注册功能"></a>实现注册功能</h2><p>定义基本的表结构，并在entity中写对应的ORM关系类</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_user<br>(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>)  <span class="hljs-keyword">null</span>,<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>)  <span class="hljs-keyword">null</span>,<br>    salt     <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 20:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String salt;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ShiroConfig类中整合Shiro配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.config;<br><br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.shiro.realms.CustomerRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.Realm;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 用来整合Shiro框架相关配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 16:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.创建shiroFilter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultWebSecurityManager 默认网页安全管理器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Shiro过滤器工厂对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">getShiroFilterFactoryBean</span><span class="hljs-params">(DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;<br>        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();<br>        <span class="hljs-comment">// filter设置安全管理器</span><br>        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);<br>        <span class="hljs-comment">// 配置系统受限资源和公共资源</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;/user/login.jsp&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);  <span class="hljs-comment">// anno设置为公共资源</span><br>        map.put(<span class="hljs-string">&quot;/user/register.jsp&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;/register.jsp&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;/**.jsp&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);  <span class="hljs-comment">// 所有资源全部需要验证</span><br>        <span class="hljs-comment">// 默认认证路径</span><br>        shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);<br>        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2.创建安全管理器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> realm 自定义Realm对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 默认网页安全管理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title">getDefaultWebSecurityManager</span><span class="hljs-params">(Realm realm)</span></span>&#123;<br>        <span class="hljs-comment">// jsp的web项目中必须使用DefaultWebSecurityManager</span><br>        DefaultWebSecurityManager defaultWebSecurityManager = <span class="hljs-keyword">new</span> DefaultWebSecurityManager();<br>        <span class="hljs-comment">// 给安全管理器设置Realm</span><br>        defaultWebSecurityManager.setRealm(realm);<br>        <span class="hljs-keyword">return</span> defaultWebSecurityManager;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3.创建自定义realm</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 自定义realm</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Realm <span class="hljs-title">getRealm</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomerRealm();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在接口实现类中对用户数据(密码)进行加盐加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.service.impl;<br><br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.dao.UserDAO;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.service.UserService;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.entity.User;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.utils.SaltUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 用户接口实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 20:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserDAO userDAO;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册用户</span><br><span class="hljs-comment">     * 对明文密码进行md5+salt+hash散列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.生成随机盐</span><br>        String salt = SaltUtils.getSalt(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 2.将随机盐保存到数据</span><br>        user.setSalt(salt);<br>        <span class="hljs-comment">// 3.将明文密码进行md5+salt+hash散列</span><br>        Md5Hash password_Md5Hashed = <span class="hljs-keyword">new</span> Md5Hash(user.getPassword(),salt,<span class="hljs-number">1024</span>);<br>        user.setPassword(password_Md5Hashed.toHex());<br>        userDAO.save(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Controller中实现用户注册服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>UserService userService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 用户认证</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> user 用户</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RequestMapping(&quot;register&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">register</span><span class="hljs-params">(User user)</span></span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        userService.register(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/login.jsp&quot;</span>;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/register.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.mdcn.shirospringbootjsp.dao.UserDAO&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into t_user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;salt&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现注册</p><p><img src="https://s2.loli.net/2022/01/21/6r7HvfaPTsCBcR2.jpg" alt="注册页面.jpg"></p><p>点击注册按钮之后，在数据库中可见注册成功</p><p><img src="https://s2.loli.net/2022/01/21/92BCIQeGSAXZ6HV.png" alt="注册成功.png"></p><h2 id="实现验证功能"><a href="#实现验证功能" class="headerlink" title="实现验证功能"></a>实现验证功能</h2><p>在自定义Realm类CustomerRealm中，继承了AuthorizingRealm类，所以有两个方法：</p><blockquote><ul><li>doGetAuthorizationInfo实现授权功能</li><li>doGetAuthenticationInfo实现验证功能</li></ul></blockquote><p>所以实现验证功能即为重写doGetAuthenticationInfo方法，将自己的业务功能添加进去，具体的代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.shiro.realms;<br><br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.entity.User;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.service.UserService;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.utils.ApplicationContextUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.ObjectUtils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义Realm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 16:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-comment">// 授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>&#123;<span class="hljs-comment">// 授权功能省略, 这并不是我们所关心的内容</span><br>    &#125;<br><br>    <span class="hljs-comment">// 认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <span class="hljs-comment">// 获取身份信息</span><br>        String principal = (String) token.getPrincipal();<br><br>        <span class="hljs-comment">// 在数据库中查询用户验证信息是否正确</span><br>        User user = userService.findByUserName(principal);<br>        <span class="hljs-comment">// user != null</span><br>        <span class="hljs-keyword">if</span>(!ObjectUtils.isEmpty(user))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(user.getUsername(),user.getPassword(), ByteSource.Util.bytes(user.getSalt()),<span class="hljs-keyword">this</span>.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意：token中用户信息是已经经过加密，所以在数据库中查询时不会出现数据不匹配的情况，除非是用户的账号或者密码错误</p><h2 id="实现授权功能"><a href="#实现授权功能" class="headerlink" title="实现授权功能"></a>实现授权功能</h2><p>如上文所说，实现授权功能即为重写doGetAuthorizationInfo方法，具体代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mdcn.shirospringbootjsp.shiro.realms;<br><br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.entity.User;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.service.UserService;<br><span class="hljs-keyword">import</span> com.mdcn.shirospringbootjsp.utils.ApplicationContextUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.ObjectUtils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 自定义Realm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Medicine</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span>: 2021-12-21 16:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br>    <span class="hljs-comment">// 容器对UserService进行管理, 而不是手动从Spring容器中寻找</span><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-comment">// 授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取身份信息</span><br>        String primaryPrincipal = (String) principals.getPrimaryPrincipal();<br>        <span class="hljs-comment">// 根据主身份信息获取角色和权限信息</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;xiaochen&quot;</span>.equals(primaryPrincipal))&#123;<br>            SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();<br>            <span class="hljs-comment">// 基于角色的权限管理</span><br>            simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;admin&quot;</span>);<br>            <span class="hljs-comment">// 基于资源的权限管理</span><br>            simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:find:*&quot;</span>);<br>            simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:update:*&quot;</span>);<br>            <span class="hljs-keyword">return</span>  simpleAuthorizationInfo;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br><span class="hljs-comment">// 认证功能省略, 这并不是我们所关心的内容</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在前台jsp页面，通过shiro标签对页面元素进行访问控制</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/html; UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;%--引入Shiro标签--%&gt;<br>&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;shiro&quot;</span> uri=<span class="hljs-string">&quot;http://shiro.apache.org/tags&quot;</span>%&gt;<br>&lt;!doctype html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;index&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;系统主页V1<span class="hljs-number">.0</span>&lt;/h1&gt;<br>    &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;退出用户&lt;/a&gt;<br><br>    &lt;ul&gt;<br>        &lt;%--具有admin角色才能看见--%&gt;<br>        &lt;shiro:hasRole name=<span class="hljs-string">&quot;admin&quot;</span>&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;商品管理&lt;/a&gt;&lt;/li&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;订单管理&lt;/a&gt;&lt;/li&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;物流管理&lt;/a&gt;&lt;/li&gt;<br>        &lt;/shiro:hasRole&gt;<br>        &lt;%--user或者admin都能看到--%&gt;<br>        &lt;shiro:hasAnyRoles name=<span class="hljs-string">&quot;user,admin&quot;</span>&gt;<br>            &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;用户管理&lt;/a&gt;<br>                &lt;ul&gt;<br>                    &lt;%--user对所有资源具有add操作权限--%&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:add:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;添加&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:delete:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;删除&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:update:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;修改&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;user:find:*&quot;</span>&gt;<br>                        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;查询&lt;/a&gt;&lt;/li&gt;<br>                    &lt;/shiro:hasPermission&gt;<br>                &lt;/ul&gt;<br>            &lt;/li&gt;<br>        &lt;/shiro:hasAnyRoles&gt;<br>    &lt;/ul&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>以xiaochen用户登录时，显示的页面是这样的：</p><p><img src="https://s2.loli.net/2022/01/21/yE6MRBI3wuUGpaX.jpg" alt="权限控制主页.jpg"></p><p>xiaochen是admin身份，且具有”user:find:<em>“和”user:update:</em>“资源权限</p>]]></content>
    
    
    <categories>
      
      <category>安全框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shiro</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板方法模式</title>
    <link href="/2021/10/03/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/03/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>模板方法提取接口重复部分，但不改变多个接口组合的整体结构</p><span id="more"></span><p>模板方法可以将多个接口中重复的部分提取出来<br>运用在算法框架中可以重新定义算法的某些实现步骤，而不改变算法的整体结构</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主体框架模板</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">al_start</span><span class="hljs-params">()</span></span>&#123;<br>        step1();<br>        step2();<br>        step3();<br>        step4();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;step1&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step3</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step4</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;step4&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解法1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Template</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;step2 by solution1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;step3 by solution1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解法2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Template</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;step2 by solution2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;step3 by solution2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Template template;<br>        System.out.println(<span class="hljs-string">&quot;solution1----&gt;&quot;</span>);<br>        template = <span class="hljs-keyword">new</span> Solution1();<br>        template.al_start();<br>        System.out.println(<span class="hljs-string">&quot;solution2----&gt;&quot;</span>);<br>        template = <span class="hljs-keyword">new</span> Solution2();<br>        template.al_start();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果</span><br><span class="hljs-comment">         * solution1----&gt;</span><br><span class="hljs-comment">         * step1</span><br><span class="hljs-comment">         * step2 by solution1</span><br><span class="hljs-comment">         * step3 by solution1</span><br><span class="hljs-comment">         * step4</span><br><span class="hljs-comment">         * solution2----&gt;</span><br><span class="hljs-comment">         * step1</span><br><span class="hljs-comment">         * step2 by solution2</span><br><span class="hljs-comment">         * step3 by solution2</span><br><span class="hljs-comment">         * step4</span><br><span class="hljs-comment">         * 可见在不改变结构的前提下, 改变了算法具体的步骤</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适配器与外观模式</title>
    <link href="/2021/10/03/%E9%80%82%E9%85%8D%E5%99%A8%E4%B8%8E%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/03/%E9%80%82%E9%85%8D%E5%99%A8%E4%B8%8E%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>适配器模式提供桥梁，外观模式体现封装</p><span id="more"></span><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>把一个类接口转换为另一个类接口，这两个类接口之间本没有任何关系</p><p>比如说如何在只有lighting接口的苹果手机上使用type-c接口呢？这时候我们就只需要一个转接头就可以了</p><p>用户是Client，苹果手机lighting接口是Target，type-c设备是Adapter，转接头就是Adaptee</p><p><img src="https://s2.loli.net/2022/01/21/DQtx9m2pn1YIgaT.png" alt="adapter.png"></p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>以书上的鸭子和火鸡经典例子举例：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Duck</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quack</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Turkey</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gobble</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WildTurkey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Turkey</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">gobble</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;wild turkey gobble&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">火鸡适配器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TurkeyAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Duck</span></span>&#123;<br>    Turkey turkey;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TurkeyAdapter</span><span class="hljs-params">(Turkey turkey)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.turkey = turkey;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quack</span><span class="hljs-params">()</span> </span>&#123;<br>        turkey.gobble();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Turkey turkey = <span class="hljs-keyword">new</span> WildTurkey();<br>        Duck duck = <span class="hljs-keyword">new</span> TurkeyAdapter(turkey);<br>        duck.quack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">输出结果: wild turkey gobble<br></code></pre></td></tr></table></figure><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>外观模式就是封装的思想，将软件实现的细节隐藏在一个黑箱中</p><p>举例一个看电视的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TVCore</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepareTV</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;prepare tv&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openTV</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;open tv&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStream</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get tv stream&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TVhelper封装了看电视的具体实现流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TVhelper</span> </span>&#123;<br>    TVCore tvCore = <span class="hljs-keyword">new</span> TVCore();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">watchTV</span><span class="hljs-params">()</span></span>&#123;<br>        tvCore.prepareTV();<br>        tvCore.openTV();<br>        tvCore.getStream();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户并不关心电视是如何获取直播流的操作<br>用户只需要执行watchTV这个方法看电视即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TVhelper tVhelper = <span class="hljs-keyword">new</span> TVhelper();<br>        tVhelper.watchTV();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">输出结果: <br>prepare tv<br>open tv<br>get tv stream<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM集成dubbo</title>
    <link href="/2021/10/03/SSM%E9%9B%86%E6%88%90dubbo/"/>
    <url>/2021/10/03/SSM%E9%9B%86%E6%88%90dubbo/</url>
    
    <content type="html"><![CDATA[<p>dubbo可以认为是一种大号的消费者-生产者模式</p><span id="more"></span><h1 id="SSM集成dubbo"><a href="#SSM集成dubbo" class="headerlink" title="SSM集成dubbo"></a>SSM集成dubbo</h1><p>这里使用的是大杂烩：SpringBoot集成Dubbo，Redis，MyBatis，Spring，Spring MVC，JSP</p><p>附一张dubbo的架构图<br><img src="https://s2.loli.net/2022/01/21/lmBGtOZoqFxu4Dy.png" alt="dubbo-architecture.png"></p><ul><li>接口工程Interface：是一个java-maven工程，存放实体bean和业务接口</li><li>服务提供者Provider：是一个springboot框架web项目，集成MyBatis, Redis<ul><li>添加依赖: springboot, mybatis, mybatis-generator, redis, mysql, dubbo, zookeeper, 接口工程依赖，复制文件resource</li><li>配置springboot核心配置文件<ul><li>配置连接数据库</li><li>配置连接redis</li><li>配置dubbo</li></ul></li></ul></li><li>服务消费者Consumer：是一个springboot框架web项目，集成JSP，dubbo<ul><li>添加依赖：dubbo, zookeeper, 接口工程依赖, jsp解析器</li><li>配置springboot核心配置文件<ul><li>配置dubbo</li><li>配置视图解析器</li></ul></li></ul></li></ul><h1 id="构建SSM-dubbo项目"><a href="#构建SSM-dubbo项目" class="headerlink" title="构建SSM-dubbo项目"></a>构建SSM-dubbo项目</h1><p>创建三个模块</p><ul><li>dubbo-interface<br>  java-maven项目</li><li>dubbo-provider<br>  springboot-web项目</li><li>dubbo-consumer<br>  springboot-web项目 + thymeleaf框架支持</li></ul><h2 id="配置Interface的pom文件"><a href="#配置Interface的pom文件" class="headerlink" title="配置Interface的pom文件"></a>配置Interface的pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mdcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置Interface的spring配置信息"><a href="#配置Interface的spring配置信息" class="headerlink" title="配置Interface的spring配置信息"></a>配置Interface的spring配置信息</h2><p><strong>Interface模块不需要配置spring配置信息</strong>，因为他根本就不是一个springboot项目，只是一个普通的java-maven项目</p><h2 id="配置Provicer的pom文件"><a href="#配置Provicer的pom文件" class="headerlink" title="配置Provicer的pom文件"></a>配置Provicer的pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mdcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springboot-web--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--dubbo集成SpringBoot--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--zookeeper注册中心--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.101tec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis集成springboot--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--redis集成springboot--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mdcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springboot-maven打包工具--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编译之后包含xml --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编译之后包含xml和properties --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置Provider的spring配置信息"><a href="#配置Provider的spring配置信息" class="headerlink" title="配置Provider的spring配置信息"></a>配置Provider的spring配置信息</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 自定义配置</span><br><span class="hljs-attr">host_ip</span> = <span class="hljs-string">xxxxxx</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#Tomcat</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mysql</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://$&#123;host_ip&#125;:3306/mydb?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#redis</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">$&#123;host_ip&#125;</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#dubbo</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">dubbo-provider</span><br><span class="hljs-meta">spring.dubbo.server</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">spring.dubbo.registry</span>=<span class="hljs-string">zookeeper://$&#123;host_ip&#125;:2181</span><br><br></code></pre></td></tr></table></figure><h2 id="配置Consumer的pom文件"><a href="#配置Consumer的pom文件" class="headerlink" title="配置Consumer的pom文件"></a>配置Consumer的pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mdcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springboot框架web起步依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springboot框架thymeleaf渲染框架依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--dubbo集成springboot框架起步依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--zookeeper注册中心--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.101tec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mdcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springboot项目编译打包插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编译之后包含xml --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编译之后包含xml和properties --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/webapp<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/resources<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis逆向工程"><a href="#Mybatis逆向工程" class="headerlink" title="Mybatis逆向工程"></a>Mybatis逆向工程</h2><p>首先将GeneratorMapper.xml文件放到interface工程模块根目录下，再在maven中使用mybatis-generator拆按生成mybatis文件夹，里面有实体类model和映射文件mapper</p><p>再将生成的mapper文件夹剪切到provider文件夹下即可</p><p><img src="https://s2.loli.net/2022/01/21/CvkVeZIXAOWtRTP.png" alt="mybatis-generator.png"></p><h2 id="配置Consumer的spring配置信息"><a href="#配置Consumer的spring配置信息" class="headerlink" title="配置Consumer的spring配置信息"></a>配置Consumer的spring配置信息</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 自定义配置</span><br><span class="hljs-attr">host_ip</span> = <span class="hljs-string">xxxxxx</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># tomcat</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8082</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># dubbo</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">dubbo-consumer</span><br><span class="hljs-meta">spring.dubbo.registry</span>=<span class="hljs-string">zookeeper://$&#123;host_ip&#125;:2181</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># jsp</span><br><span class="hljs-meta">spring.mvc.view.prefix</span>=<span class="hljs-string">/</span><br><span class="hljs-meta">spring.mvc.view.suffix</span>=<span class="hljs-string">.jsp</span><br></code></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>基于MVC架构，分别来编写每一层代码</p><p>首先是Controller类<br>在dubbo-demo/src/main/java/com/mdcn/web目录下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDemoController</span> </span>&#123;<br>    <span class="hljs-meta">@Reference(interfaceName = &quot;com.mdcn.web.service.StudentService&quot;, version = &quot;1.0&quot;, check = false)</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/demo/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">studentDetailById</span><span class="hljs-params">(Model model,<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>        Student student = studentService.getStudentById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;student&quot;</span>,student);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;studentDetailById&quot;</span>; <span class="hljs-comment">// 返回指定的页面</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在dubbo-interface接口工程模块中创建StudentService接口类</p><blockquote><p>注意：这里因为之前已经通过mybatis-generator自动构建了Student实体类，不需要再重复定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-function">Student <span class="hljs-title">getStudentById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建完Service接口之后，再dubbo-provider服务提供者模块编写他的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 交给spring容器管理</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">// 暴露服务接口</span><br><span class="hljs-meta">@Service(interfaceName = &quot;com.mdcn.web.service.StudentService&quot;, version = &quot;1.0&quot;, timeout = 15000)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">getStudentById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentMapper.selectByPrimaryKey(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样大体就完成了一次到数据库中查询数据的流程，随后就是回到dubbo-consumer服务消费者模块中编写view视图层数据显示页面<br>在resources/templates/studentDetailById.html文件中，注意这里的文件名需要和Controller控制类中@RequestMapping注解下方法的返回字符串名相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot; &#x27;学生学号: &#x27; + $&#123;student.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot; &#x27;学生姓名: &#x27; + $&#123;student.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot; &#x27;学生年龄: &#x27; + $&#123;student.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后在springboot启动文件application中配置注解信息交给dubbo服务管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务提供者springboot启动类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.mdcn.mybatis.mapper&quot;)</span> <span class="hljs-comment">// 扫描mapper文件</span><br><span class="hljs-meta">@EnableDubboConfiguration</span> <span class="hljs-comment">// 开启dubbo配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DubboProviderApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DubboProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务消费者springboot启动类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDubboConfiguration</span> <span class="hljs-comment">// 开启dubbo</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DubboConsumerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DubboConsumerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在一切准备就绪之后，就可以准备启动项目了</p><p>404: 改变注解 @SpringBootApplication文件所在的目录位置。因为SpringBoot 注解 @SpringBootApplication 默认扫描当前类的同包以及子包下的类</p><h2 id="启动dubbo项目"><a href="#启动dubbo项目" class="headerlink" title="启动dubbo项目"></a>启动dubbo项目</h2><p>首先启动dubbo-provider服务提供者模块</p><p><img src="https://s2.loli.net/2022/01/21/Lz6AxBilGtmodJP.png" alt="start-1.png"></p><p>启动成功之后再启动dubbo-consumer服务消费者模块<br><strong>一定要注意两个模块之间的启动顺序！！！以及端口号不能重复且不能被占用！！！</strong><br>我这里分别使用的是8081端口和8082端口</p><p><img src="https://s2.loli.net/2022/01/21/6UeCdbEtOSJgr2M.png" alt="start-2.png"></p><p>控制台显示provider和consumer服务均启动成功</p><p><img src="https://s2.loli.net/2022/01/21/j7PdoN5rxkc1pzy.png" alt="provider-success.png"></p><p><img src="https://s2.loli.net/2022/01/21/OcEIFJi829PamxC.png" alt="consumer-success.png"></p><p>最后在postman中访问服务测试是否成功:</p><p><img src="https://s2.loli.net/2022/01/21/wlr4meIfsaA1iFx.png" alt="postman-test.png"></p><p>服务器成功返回数据，测试成功！也可以证明dubbo基本的框架我们已经搭建成功，之后可以继续在此框架之上继续更加深入的学习和代码测试</p>]]></content>
    
    
    <categories>
      
      <category>Spring Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2021/09/17/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/09/17/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>代理模式通过代理对象访问目标对象，并实现功能增强</p><span id="more"></span><p>代理Porxy提供了目标对象的另一种访问方式，即通过代理对象访问目标对象，并且可选择地在目标对象的目标方法上做一些功能的增强</p><p>代理模式的基本实现类结构如下图：</p><p><img src="https://s2.loli.net/2022/01/21/DfjLSBgq4EHrdFe.png" alt="代理模式.png"></p><p>代理模式有三种实现方法：静态代理，动态代理，cglib代理</p><h1 id="方式一：静态代理"><a href="#方式一：静态代理" class="headerlink" title="方式一：静态代理"></a>方式一：静态代理</h1><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 共同的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 真实对象，即被代理的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;static_proxy.RealSubject::doSomething()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxySubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>&#123;<br>    <span class="hljs-keyword">private</span> RealSubject realSubject;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        第一种：通过传值的形式，把实列化对象传过来。</span><br><span class="hljs-comment">        （理解为装饰器模式了）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxySubject</span><span class="hljs-params">(RealSubject realSubject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.realSubject = realSubject;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        第二种：采用类加载器形式，去加载实列对象，</span><br><span class="hljs-comment">        这样我们就不同关心到底什么时候需要真实的实列化对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxySubject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;<br>        <span class="hljs-keyword">this</span>.realSubject = (RealSubject) <span class="hljs-keyword">this</span>.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;static_proxy.RealSubject&quot;</span>).newInstance();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        realSubject.doSomething();<br>        <span class="hljs-comment">// 这里可以放一些功能增强的代码</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;第一种方式(类加载器形式)&quot;</span>);<br>            <span class="hljs-keyword">new</span> ProxySubject().doSomething();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;第二种方式(传值)&quot;</span>);<br>        <span class="hljs-keyword">new</span> ProxySubject(<span class="hljs-keyword">new</span> RealSubject()).doSomething();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出结果</span><br><span class="hljs-comment"> */</span><br>第一种方式(类加载器形式)<br>static_proxy.RealSubject::doSomething()<br>第二种方式(传值)<br>static_proxy.RealSubject::doSomething()<br></code></pre></td></tr></table></figure><h1 id="方式二：动态代理"><a href="#方式二：动态代理" class="headerlink" title="方式二：动态代理"></a>方式二：动态代理</h1><p>动态代理主要通过调用JDK的InvocationHandler接口来实现代理功能，所以动态代理也成为JDK代理，接口代理</p><p>以下用一个螳螂捕蝉黄雀在后的例子来形象地说明动态代理中各种类之间的关系，这里也借鉴了一些傲丙的文章</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 共同接口，基础业务类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BaseService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mainService</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 蝉</span><br><span class="hljs-comment"> * 被代理的类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cicada</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BaseService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mainService</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;主要业务，蝉，当蝉出现业务调用时，螳螂监听到&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 螳螂</span><br><span class="hljs-comment"> * 实现调用处理器接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrayingMantis</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> BaseService baseService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PrayingMantis</span><span class="hljs-params">(BaseService baseService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.baseService = baseService;<br>    &#125;<br><br>    <span class="hljs-comment">// 螳螂的主要任务，也就是监听对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        method.invoke(baseService,args); <span class="hljs-comment">// 基础业务</span><br>        secondaryMain(); <span class="hljs-comment">// 增强业务</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 可理解为增强业务</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">secondaryMain</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;螳螂捕蝉 - 次要业务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上基本实现了代理的基本功能，二级代理也是一样的原理，在一级代理的基础上再代理一层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 黄雀类，模拟二级代理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cardinal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-comment">// 监听代理代理对象</span><br>    <span class="hljs-keyword">private</span> Object proxyOne;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cardinal</span><span class="hljs-params">(Object proxyOne)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.proxyOne = proxyOne;<br>    &#125;<br><br>    <span class="hljs-comment">// 螳螂主要业务 也就是监听对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        method.invoke(proxyOne,args); <span class="hljs-comment">// 一级代理对象基础功能</span><br>        secondaryMain(); <span class="hljs-comment">// 二级代理对象增强功能</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">secondaryMain</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;黄雀吃螳螂 - 次要任务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来测试一下代码运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Client类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BaseService <span class="hljs-title">newInstance</span><span class="hljs-params">(Class classFile)</span></span>&#123;<br>        <span class="hljs-comment">// 1. 创建蝉，真实类对象</span><br>        BaseService trueCicada = <span class="hljs-keyword">new</span> Cicada();<br>        <span class="hljs-comment">// 2. 创建代理类 螳螂</span><br>        <span class="hljs-comment">// prayingMantis是trueCicada的代理</span><br>        InvocationHandler prayingMantis = <span class="hljs-keyword">new</span> PrayingMantis(trueCicada);<br>        <span class="hljs-comment">// 3. 向JVM索要代理对象 其实就是监听的对象</span><br>        Class classArray[] = &#123;BaseService.class&#125;;<br>        BaseService baseService = (BaseService) Proxy.newProxyInstance(classFile.getClassLoader(),classArray,prayingMantis);<br><br>        <span class="hljs-comment">// 二级代理</span><br>        InvocationHandler cardinal = <span class="hljs-keyword">new</span> Cardinal(baseService);<br>        BaseService secondBaseService = (BaseService) Proxy.newProxyInstance(classFile.getClassLoader(),classArray,cardinal);<br>        <span class="hljs-keyword">return</span> secondBaseService;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BaseService baseService = newInstance(Cicada.class);<br>        baseService.mainService();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出结果</span><br><span class="hljs-comment"> */</span><br>主要业务，蝉，当蝉出现业务调用时，螳螂监听到<br>螳螂捕蝉 - 次要业务<br>黄雀吃螳螂 - 次要任务<br></code></pre></td></tr></table></figure><p>从上面的代码可以看出，代理类中最核心的方法是invoke方法，在该方法中完成被代理对象的方法以及调用增强功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><span class="hljs-comment">// do something...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方式三：cglib代理"><a href="#方式三：cglib代理" class="headerlink" title="方式三：cglib代理"></a>方式三：cglib代理</h1><p>前两种方式都是要求目标对象实现某个接口，但是当目标对象没有实现任何接口，只是一个单独的对象的时候，可以使用cglib代理来是实现代理的功能</p><p>cglib代理不需要目标对象实现任何接口，cglib是通过继承目标对象，以子类的方式来实现代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标对象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用原始MyClass类的doSome()方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意：实现MethodInterceptor接口需要导入cglib.jar包，或者导入spring.core包也可以，spring包中包括了cglib包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理对象，实现方法拦截器接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">// 维护一个目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取代理对象实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// Enhancer工具类</span><br>        Enhancer en = <span class="hljs-keyword">new</span> Enhancer();<br>        <span class="hljs-comment">// 设置目标对象</span><br>        en.setSuperclass(target.getClass());<br>        <span class="hljs-comment">// 设置回调函数, 表示代理的逻辑放在哪，可以是一个日志对象</span><br>        en.setCallback(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 创建代理对象</span><br>        <span class="hljs-keyword">return</span> en.create();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法拦截器</span><br><span class="hljs-comment">     * 将目标对象的方法拦截下来，可以做一些方法的增强或者其他的代理功能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object obj,</span></span><br><span class="hljs-params"><span class="hljs-function">                            Method method,</span></span><br><span class="hljs-params"><span class="hljs-function">                            Object[] args,</span></span><br><span class="hljs-params"><span class="hljs-function">                            MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">// 执行目标对象的方法</span><br>        proxy.invokeSuper(obj, args);<br>        System.out.println(<span class="hljs-string">&quot;--调用一些其他不关心的方法或者控制访问的权限--&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 目标对象</span><br>        MyClass myClass = <span class="hljs-keyword">new</span> MyClass();<br>        <span class="hljs-comment">// 代理对象</span><br>        MyClass proxy = (MyClass) <span class="hljs-keyword">new</span> ProxyFactory(myClass).getProxyInstance();<br>        proxy.doSome();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出结果</span><br><span class="hljs-comment"> */</span><br>调用原始MyClass类的doSome()方法<br>--调用一些其他不关心的方法或者控制访问的权限--<br></code></pre></td></tr></table></figure><h1 id="代理模式和装饰者模式的区别"><a href="#代理模式和装饰者模式的区别" class="headerlink" title="代理模式和装饰者模式的区别"></a>代理模式和装饰者模式的区别</h1><p>都可以实现方法的增强功能，但是实现的角度不一样</p><p>代理模式：在编译期间就确定好需要增强的功能，一些调用者并不关心，或者被调用者不希望调用者知道实现细节的方法。代理模式也可以实现对对象访问权限的控制，比如不同角色对数据库数据进行操作之前都需要先登录账号，代理模式可以代理角色对象，验证当前用户是否登录，再调用数据库的invoke方法进行数据库查询的操作<br>装饰者模式：在运行期间动态地增加需要增强的功能，虽然我的功能增强了，但还是我，而且当前装饰类可以无限被装饰(无限增强功能)</p><p>如果还是无法理解的话，可以看以下几个通俗的例子：</p><p>例子一：买房子<br>装饰者模式：买毛坯房，房子的具体装修自己设计<br>代理模式：直接买精装房，不关心如何装修，只关心是否可以拎包入住</p><p>例子二：钢铁侠<br>装饰者模式：史塔克穿反浩克装甲<br>代理模式：但是史塔克没有能力自己穿，需要让贾维斯帮自己从太空上叫下来<br>反浩克装甲有无数个(装饰者模式可以无限增强)<br>贾维斯只有一个(代理模式不会无限代理)</p><p>例子三：保护自己<br>装饰者模式：靠自己每天吃蛋白粉变壮变强，出去不怕被人欺负了<br>代理模式：请一个保镖保护自己，自己还是那个自己，体格没有改变，但出去也不怕被欺负了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>静态代理：实现一个共同的接口</li><li>动态代理：实现JDK的API，重写invoke方法</li><li>cglib代理：实现cglib中的方法拦截器MethodInterceptor，工具类Enhancer创建代理类，拦截器intercept实现功能增强</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2021/09/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/09/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>单例模式是为了确保在当前进程中，创建的类有且仅有一个实例</p><span id="more"></span><p>单例模式有三种实现思想：懒汉式，饿汉式，枚举类</p><p>首先需要理清楚一个问题：</p><h1 id="什么是懒汉式？什么是饿汉式？"><a href="#什么是懒汉式？什么是饿汉式？" class="headerlink" title="什么是懒汉式？什么是饿汉式？"></a>什么是懒汉式？什么是饿汉式？</h1><p>懒汉式：默认不会实例化，什么时候用什么时候new<br>我是这么理解的，懒汉他很懒，别人不来调用这个类创建对象他就不创建对象，死猪不怕开水烫，在类空间里面摆烂</p><p>饿汉式：类加载的时候就被实例化，并且创建单例对象<br>我是这么理解的，饿汉他很饿，别人第一次调用这个类的时候他就已经把对象加载好了</p><h1 id="方法一：懒汉式非线程安全"><a href="#方法一：懒汉式非线程安全" class="headerlink" title="方法一：懒汉式非线程安全"></a>方法一：懒汉式非线程安全</h1><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getUniqueInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 延迟实例化对象，节省资源</span><br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>            uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这个方法是非线程安全的，因为当有多个线程进入getUniqueInstance()方法的时候，并且此时uniqueInstance = null，则会有多个线程执行new语句，导致实例化多次，违反单例模式目的</p><h1 id="方法二：懒汉式线程安全"><a href="#方法二：懒汉式线程安全" class="headerlink" title="方法二：懒汉式线程安全"></a>方法二：懒汉式线程安全</h1><p>只是粗暴的在getUniqueInstance()方法上加上synchronized</p><p>但是这回使得所有对象未被实例化的线程进入等待状态，导致线程阻塞时间过长，在性能上会有一些损失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getUniqueInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 延迟实例化对象，节省资源</span><br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>            uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法三：饿汉式线程安全"><a href="#方法三：饿汉式线程安全" class="headerlink" title="方法三：饿汉式线程安全"></a>方法三：饿汉式线程安全</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用JVM的static静态变量来达到单例模式的目的<br>但是这个方法也失去了延迟实例化对象带来的节省资源的优点</p><h1 id="方法四：双重校验锁"><a href="#方法四：双重校验锁" class="headerlink" title="方法四：双重校验锁"></a>方法四：双重校验锁</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getUniqueInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>                    uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>两个if语句：第一个if语句为了避免已被实例化后的加锁操作，第二个if语句是在加锁之后的一个线程进入，就不会出现多个线程同时进行实例化的操作</li><li>volatile：由于JVM具有指令重排的特性，在new的时候可能会出现在多线程情况下指令混乱的情况，可能一个uniqueInstance还未被初始化就被返回，使用volatile可以禁止JVM指令重排，保证在多线程环境下new语句可以正常执行</li></ul><p>但是volatile会屏蔽掉JVM中的一些必要的代码优化，所以执行效率不是很高，下面介绍的静态内部类实现是一个更好的解决方法</p><h1 id="方法五：静态内部类实现"><a href="#方法五：静态内部类实现" class="headerlink" title="方法五：静态内部类实现"></a>方法五：静态内部类实现</h1><p>当Singleton类被加载时，静态内部类SingletonHolder不会被加载。只有在调用getUniqueInstance()方法时SingletonHolder类才会被加载</p><p>所以这个方法同时达成了 对象延迟初始化 和 JVM提供多线程支持 两个优点<br>也可以理解为懒汉式的一种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonHolder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getUniqueInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有更加完美的方法：</p><h1 id="方法六：枚举"><a href="#方法六：枚举" class="headerlink" title="方法六：枚举"></a>方法六：枚举</h1><p>从根本上解决了多线程的问题，因为枚举类式线程安全的，而且只会被装载一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonObject</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonObject</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span></span>&#123;<br>        INSTANCE;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SingletonObject instance ;<br>        Singleton()&#123;<br>            instance = <span class="hljs-keyword">new</span> SingletonObject();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> SingletonObject <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonObject <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Singleton.INSTANCE.getInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由上述例子可以总结出一些单例模式的特点：</p><ul><li>可以保证该对象只有一个实例对象</li><li>构造器必须私有的，外部类无法通过构造器方法创建该实例</li><li>没有公开的set方法，外部类无法调用set方法创建该实例</li><li>只提供一个公开的get方法获取唯一的实例对象</li></ul><p>单例模式又有哪些优点呢：</p><ul><li>省去了new操作符，降低了系统内存的使用频率，对于一些大型的对象，这可能会是一比十分巨大的系统开销</li><li>系统中的某些对象可能控制着处理流程，如果该类可以创建多个实例对象的话，系统完全乱了，比如spring里存放在容器中的bean对象们</li><li>避免对资源的重复占用</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2021/09/14/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/09/14/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>工厂模式提供接口批量生产对象示例</p><span id="more"></span><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。<br>它被所有需要进行实例化的客户类调用。</p><p><img src="https://s2.loli.net/2022/01/21/4EUznPsjrdL5WR6.png" alt="simple_factory.png"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标接口实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteProduct</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteProduct doSome()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleFactory</span> </span>&#123;<br>    <span class="hljs-function">Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConcreteProduct();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用简单工厂创建实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleFactory simpleFactory = <span class="hljs-keyword">new</span> SimpleFactory();<br>        Product product = simpleFactory.createProduct();<br>        product.doSome();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>定义了一个创建对象的抽象类, 由抽象类的子类决定要实例化哪个类<br>也可以这么理解: 工厂方法把实例化操作推迟到子类</p><p><img src="https://s2.loli.net/2022/01/21/AZSRh8euTOfbNUI.png" alt="factory_method.png"></p><p>工厂方法是简单工厂的延迟实现，即将超级工厂(简单工厂)拆分为多个工厂<br><img src="https://s2.loli.net/2022/01/21/X8rM4bHfkYwuZSt.jpg" alt="factory_method_2.jpg"></p><p>代码实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title">factoryMethod</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>        Product product = factoryMethod();<br>        <span class="hljs-comment">// do something with the product</span><br>        product.f();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Factory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">factoryMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConcreteProduct1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Factory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">factoryMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConcreteProduct2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteProduct</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteProduct::f()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteProduct1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteProduct1::f()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteProduct2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteProduct2::f()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Factory factory;<br>        factory = <span class="hljs-keyword">new</span> ConcreteFactory();<br>        factory.doSome();<br>        factory = <span class="hljs-keyword">new</span> ConcreteFactory1();<br>        factory.doSome();<br>        factory = <span class="hljs-keyword">new</span> ConcreteFactory2();<br>        factory.doSome();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">ConcreteProduct::f()<br>ConcreteProduct1::f()<br>ConcreteProduct2::f()<br></code></pre></td></tr></table></figure><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>提供一个抽象工厂接口，创建一个产品家族，也就是很多对象，并且这些对象是相关的，必须要一起创建出来。而工厂方法模式只是用于多个工程创建一种对象</p><p><img src="https://s2.loli.net/2022/01/21/Z7TOhopXdQ5Yi4g.png" alt="abstract_factory.png"></p><p>抽象工厂也实现了将创建对象的方法延迟到子类实现，例如上图中的AbstractFactory创建Product的方法都由ConcreteFactory1和ConcreteFactory2来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象工厂类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> AbstractProductA <span class="hljs-title">createProductA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> AbstractProductB <span class="hljs-title">createProductB</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractProductA</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractProductB</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">AbstractProductA <span class="hljs-title">createProductA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductA1();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">AbstractProductB <span class="hljs-title">createProductB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductB1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">AbstractProductA <span class="hljs-title">createProductA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductA2();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">AbstractProductB <span class="hljs-title">createProductB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductB2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductA1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProductA</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductA2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProductA</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductB1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProductB</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductB2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProductB</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用简单工厂创建实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AbstractFactory abstractFactory = <span class="hljs-keyword">new</span> ConcreteFactory1();<br>        AbstractProductA productA = abstractFactory.createProductA();<br>        AbstractProductB productB = abstractFactory.createProductB();<br>        <span class="hljs-comment">// do something with productA,B</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三种方法的区别"><a href="#三种方法的区别" class="headerlink" title="三种方法的区别"></a>三种方法的区别</h2><h3 id="简单工厂-1"><a href="#简单工厂-1" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>是工厂方法的一种特例，有一个默认的实现类来实现他的所有功能</p><p>举例：1个工厂生产1种对象<br>    1个工厂：工厂<br>    1种对象：冰箱</p><h3 id="工厂方法-1"><a href="#工厂方法-1" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>是抽象工厂的一种特例</p><p>举例：n个工厂生产1种对象<br>    n个工厂：格力工厂，海尔工厂，海信工厂<br>    1种对象：冰箱<br>                  （格力冰箱，海尔冰箱，海信冰箱）</p><h3 id="抽象工厂-1"><a href="#抽象工厂-1" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>在产品等级（同一个牌子）和产品族（同一类型的电气）两个维度上具有共性</p><p>举例：n个工厂生产n种对象<br>    n个工厂：格力工厂，海尔工厂，海信工厂<br>    n种对象：格力冰箱，格力空调，格力TV，<br>                      海尔冰箱，海尔空调，海尔TV，<br>                      海信冰箱，海信空调，海信TV</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰者模式</title>
    <link href="/2021/09/14/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/09/14/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>装饰者模式为对象动态添加功能</p><span id="more"></span><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p>为对象动态添加功能</p><p>Decorator类是一个抽象类, 可以在抽象类中对Component接口的方法进行一些增加, 然后在抽象类的实现类中对增加的方法进行实现, 从而达到一个动态添加功能的目的</p><p>个人认为, 下图中的’ConcreteDecorationAB’更改为’ConcreteComponentAB’更合适</p><p><img src="https://s2.loli.net/2022/01/21/L6WneJIPmjxuN19.png" alt="decoration.png"></p><p>代码实现: </p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 组件(被装饰对象)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doOperation</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 原始组件实现类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doOperation</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 装饰者</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> Component component;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 添加方法后的组件实现类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteDecoratorA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Decorator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteDecoratorA</span><span class="hljs-params">(Component component)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.component = component;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doOperation</span><span class="hljs-params">()</span> </span>&#123;<br>        component.doOperation();<br>        <span class="hljs-keyword">this</span>.doOther();<br>    &#125;<br>    <span class="hljs-comment">// 添加的功能</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doOther</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Component component = <span class="hljs-keyword">new</span> ConcreteComponent();<br>        <span class="hljs-comment">// 原始方法</span><br>        component.doOperation();<br>        <span class="hljs-comment">// 装饰(改变引用, 动态增加)</span><br>        component = <span class="hljs-keyword">new</span> ConcreteDecoratorA(component);<br>        <span class="hljs-comment">// 装饰之后的方法</span><br>        component.doOperation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2021/09/14/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/09/14/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>观察者模式定义对象之间的一对多的关系</p><span id="more"></span><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>Observer</p><p>定义对象之间的一对多的关系, 当一个对象的状态改变时, 他的所有依赖都会收到通知并且自动更新动态<br>主题Subject ——&gt; 观察者Observer</p><p><img src="https://s2.loli.net/2022/01/21/XgIct6FGkRwaumE.png" alt="observer.png"><br><img src="https://s2.loli.net/2022/01/21/FXaIKw4rldBUgyG.png" alt="observer_2.png"></p><p>代码实现:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 主题接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer observer)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer observer)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 观察者接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 主题</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>&#123;<br>    List&lt;Observer&gt; observerList = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer observer)</span> </span>&#123;<br>        observerList.add(observer);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(Observer observer : observerList)&#123;<br>            observer.update();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer observer)</span> </span>&#123;<br>        observerList.remove(observer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 观察者</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    Subject subject;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteObserver</span><span class="hljs-params">(Subject subject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.subject = subject;<br>        subject.registerObserver(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;update&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是: 为什么时Observer类中有Subject而不是Subject中有Observer?<br>原因: 开闭原则, 对扩展开放, 对修改关闭。Subject主题是我们已经确定好的类，现在需要做出改变的只是多几个订阅者(也就是观察者)，实现对当前系统的一个扩展。用户也不需要知道主题类如何添加一个观察者，只需要知道将观察者注册到哪个主题即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 新建主题</span><br>        Subject subject = <span class="hljs-keyword">new</span> ConcreteSubject();<br>        <span class="hljs-comment">// 注册观察者(观察者订阅主题服务)</span><br>        Observer observer1 = <span class="hljs-keyword">new</span> ConcreteObserver(subject);<br>        Observer observer2 = <span class="hljs-keyword">new</span> ConcreteObserver(subject);<br>        Observer observer3 = <span class="hljs-keyword">new</span> ConcreteObserver(subject);<br>        <span class="hljs-comment">// 主题更新并通知所有观察者</span><br>        <span class="hljs-comment">// subject.dosomehing()主题状态发生改变, 具体细节这里不做实现</span><br>        subject.notifyObservers();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo中图片资源无法显示的问题</title>
    <link href="/2021/09/14/%E8%A7%A3%E5%86%B3hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/09/14/%E8%A7%A3%E5%86%B3hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>解决hexo中图片资源无法显示的问题</p><span id="more"></span><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>晚上在打算更新博客的时候发现网站图片资源无法加载出来，在网上找了几天解决方法也不能很好的解决这个问题，但是网上的贴子也给我提供了一定的解决思路，也借此总结了以下hexo博客插入图片的方法</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>大概的思路：把所有有关的软件版本全部更新到最新版本。<br>所包括的软件有：vscode, hexo, blog插件</p><h3 id="更新vscode"><a href="#更新vscode" class="headerlink" title="更新vscode"></a>更新vscode</h3><p>在设置中自动更新到官方最新版本（当前使用版本1.60.0）</p><h3 id="更新hexo"><a href="#更新hexo" class="headerlink" title="更新hexo"></a>更新hexo</h3><p>更新使用淘宝的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>建立软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/bin<br>ln -s /usr/local/node/bin/cnpm cnpm<br></code></pre></td></tr></table></figure><p>更新hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install -g cnpm# 升级npm<br>cnpm cache clean -f# 清除缓存<br></code></pre></td></tr></table></figure><p>更新插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install -g npm-check# 检查有哪些可升级的插件<br>cnpm install -g npm-upgrade# 升级系统中的插件<br><br>cnpm update# 更新hexo及所有插件<br>hexo -v# 检查hexo版本确认已更新<br></code></pre></td></tr></table></figure><p><strong>接下来图片就可以正常显示了（至少我的博客是这样的），接下来再总结一下hexo插入图片的方法：</strong></p><h3 id="方法一：绝对引用"><a href="#方法一：绝对引用" class="headerlink" title="方法一：绝对引用"></a>方法一：绝对引用</h3><p>将图片资源保存在 /pics 文件下（文件名是自定义的），通过绝对地址来插入图片<br>注意：根目录 /pics 是在 /source 文件夹目录之下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">![image-20210913215821170](/pics/image-20210913215821170.png)<br></code></pre></td></tr></table></figure><p><img src="/pics/image-20210913215821170.png" alt="image-20210913215821170"></p><p>经验证 pics 文件下的文件夹中的图片也支持绝对引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">![image-20210913215821170](/pics/Typora图片资源测试/image-20210913215821170.png)<br></code></pre></td></tr></table></figure><p><img src="/pics/Typora%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%B5%8B%E8%AF%95/image-20210913215821170.png" alt="image-20210913215821170"></p><h3 id="方法二：相对引用"><a href="#方法二：相对引用" class="headerlink" title="方法二：相对引用"></a>方法二：相对引用</h3><p>更新站点配置文件 _config.yml 下的配置命令，可以在每次新建文章的时候就会建立同名文件夹，在使用Typora编写文章时将图片放入同名文件夹即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true# 改为true<br></code></pre></td></tr></table></figure><p>之后，直接调用命令可直接访问图片资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">![image-20210913215821170](image-20210913215821170.png)<br></code></pre></td></tr></table></figure><p><img src="image-20210913215821170.png" alt="image-20210913215821170"></p><p>但是值得注意的是：同样的目录结构在Typora和hexo中引用的路径不一样，所以需要每次上传的时候手动更改图片资源的引用路径，这个目前还没有找到特别有效的解决方法，除非使用在线图床</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Typora</span><br>![image-20210913215821170](Typora图片资源测试/image-20210913215821170.png)<br><span class="hljs-meta">#</span><span class="bash"> hexo</span><br>![image-20210913215821170](image-20210913215821170.png)<br></code></pre></td></tr></table></figure><h3 id="方法三：在线图床"><a href="#方法三：在线图床" class="headerlink" title="方法三：在线图床"></a>方法三：在线图床</h3><p>个人推荐一个比较好用的图床 <a href="https://sm.ms/">sm.ms</a> ，点击上传之后直接赋值连接粘贴过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">![image-20210913215821170.png](https://i.loli.net/2021/09/14/F7lHB3AVG8i6Z42.png)<br></code></pre></td></tr></table></figure><img src="%E8%A7%A3%E5%86%B3hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/F7lHB3AVG8i6Z42.png" alt="image-20210913215821170.png"  />]]></content>
    
    
    
    <tags>
      
      <tag>BUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java为什么能够跨平台</title>
    <link href="/2021/09/12/JVM%E6%96%87%E7%AB%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/09/12/JVM%E6%96%87%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>平台 = 操作系统 + 硬件</p><span id="more"></span><h1 id="Java为什么能够跨平台"><a href="#Java为什么能够跨平台" class="headerlink" title="Java为什么能够跨平台"></a>Java为什么能够跨平台</h1><p>Java程序是首先是经过Java编译器(javac)编译形成字节码文件(.class)，JVM将字节码文件翻译成特定平台下的机器码运行</p><p>所以：<strong>Java程序可以跨平台，JVM不可以跨平台</strong></p><p>Java编译器将Java程序编译之后的字节码文件都是一样的，但是无法跨平台运行，不同平台版本的JVM虚拟机就是相同的字节码文件翻译为不同平台的机器码来执行，JVM在其中充当的是一个中间层的角色</p><p>这也体现了多态的思想，在多种平台下，JVM翻译的字节码文件有着不同的状态</p><h1 id="Java程序执行速度较慢的原因和解决方法"><a href="#Java程序执行速度较慢的原因和解决方法" class="headerlink" title="Java程序执行速度较慢的原因和解决方法"></a>Java程序执行速度较慢的原因和解决方法</h1><p>Java程序编译器编译为class文件之后还不能直接运行，需要通过JVM翻译为机器码才能交给机器执行，这也就决定了Java程序先天的会比本地语言的应用程序慢</p><p>为了解决这个问题，JVM引用了JIT技术来提高虚拟机的编译速度，JIT即Just-In-Time Compiler即时编译器，通过将热点代码编译成本机代码来提高Java程序执行的性能</p><p>这里也是类似于redis中缓存热点数据的思想，其实计算机学科中有很多地方都运用了这种思想来提高程序运行速度，以后有机会的话也更一篇redis的相关文章</p><h1 id="JVM如何识别热点代码"><a href="#JVM如何识别热点代码" class="headerlink" title="JVM如何识别热点代码"></a>JVM如何识别热点代码</h1><p>一般有两个主流探测方法，目前主流方法是后者</p><ul><li>采样</li><li>计数器<ul><li>方法调用计数器</li><li>回边计数器</li></ul></li></ul><p>计数器中存放有一个特定的阈值，当计数器超过阈值溢出了就会触发JIT编译</p><h1 id="Java四种引用类型"><a href="#Java四种引用类型" class="headerlink" title="Java四种引用类型"></a>Java四种引用类型</h1><ul><li><p>强引用</p><ul><li>GC绝不会回收</li></ul></li><li><p>软引用</p><ul><li>如果内存空间足够，则不会被GC回收</li><li>如果内存空间不够，则被GC回收</li></ul></li><li><p>弱引用</p><ul><li>GC线程扫描管辖的内存空间范围，不管内存空间是否足够直接将对象内存空间回收</li></ul></li><li><p>虚引用</p><ul><li>虚引用十分脆弱甚至无法获取到被引用的对象，唯一的作用是当指向的对象被回收之后虚引用本身会被加入到引用队列中，用作记录它指向的对象已被回收</li></ul></li></ul><h1 id="JVM加载一个类的过程"><a href="#JVM加载一个类的过程" class="headerlink" title="JVM加载一个类的过程"></a>JVM加载一个类的过程</h1><p>三个步骤：加载，连接，初始化：</p><ul><li><p>加载</p><p>  将类的class文件读入到内存中，通常是创建一个字节数组来读，然后产生所加载类的对象</p></li><li><p>连接</p><p>  加载完之后的类还不完整，类中的变量还未分配内存和初始化，连接也分为三步</p><ul><li><p>验证</p></li><li><p>准备</p><p>  为静态变量分配内存，并设置默认值</p></li><li><p>解析</p><p>  将符号引用替换为直接引用</p></li></ul></li><li><p>初始化</p><ul><li>如果类存在直接的父类则先初始化父类</li><li>如果类中存在初始化语句则先执行初始化语句(一般是类的构造器方法)<br>  所以：加载静态变量并初始化在加载类之后，初始化类之前</li></ul></li></ul><h1 id="类加载器的种类和作用"><a href="#类加载器的种类和作用" class="headerlink" title="类加载器的种类和作用"></a>类加载器的种类和作用</h1><p>在JDK1.2之后，类加载过程采用双亲委派机制，更好的保证了Java平台的安全性</p><p>JVM自带的Bootstrap是根加载器，其他加载器有且仅有一个父加载器</p><p>类的加载首先请求父类加载器，无能为力时才由其子类加载</p><p>类加载器的种类和作用：</p><ul><li>根加载器（Bootstrap）</li><li>扩展加载器（ExtClassLoader）</li><li>系统加载器（AppClassLoader）</li><li>用户自定义加载器</li></ul><p>根加载器一般用本地代码实现，负责加载JVM核心基础类库</p><p>扩展加载器从系统指定目录 java.ext.dirs 中加载类库，它的父加载器是Bootstrap</p><p>系统加载器从环境变量classpath或者系统属性java.class.path所指定的目录中加载类，它的父加载器是Extension</p><p>用户自定义加载器它的父类是AppClassLoader</p><h1 id="GC和STW"><a href="#GC和STW" class="headerlink" title="GC和STW"></a>GC和STW</h1><p>GC垃圾收集器，帮助Java程序员自动管理内存</p><p>STW：Stop-The-World，是一种全局停顿状态，在执行GC算法时Java程序所有线程都被挂起，让GC线程收集现场内存垃圾</p><h1 id="GC种类"><a href="#GC种类" class="headerlink" title="GC种类"></a>GC种类</h1><ul><li>Serial串行收集器</li><li>ParNew收集器</li><li>Parallel收集器</li><li>Parallel Old收集器</li><li>CMS收集器</li><li>G1收集器</li></ul><p>Serial串行收集器：最古老，但也是最稳定，效率较高的收集器</p><p>ParNew收集器：相当于多线程版本Serial串行收集器</p><p>Parallel收集器：优化系统吞吐量版本的ParNew收集器</p><p>Parallel Old收集器：老版本的Parallel收集器，采用多线程+“标记-整理”算法</p><p>CMS收集器：Concurrent Mark Sweep并发标志+整理，以获取最短回收停顿时间</p><p>G1收集器：面向服务器的垃圾收集器，既满足GC停顿时间高要求，还具备高吞吐量性能要求</p><h1 id="GC回收算法"><a href="#GC回收算法" class="headerlink" title="GC回收算法"></a>GC回收算法</h1><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-压缩算法</li><li>分代收集算法</li></ul><p>标记-清除算法：标记所有需要回收的对象，再回收所有被标记的对象</p><p>复制算法：将可用内存空间划分为两块同等大小的空间，每次只使用其中的一块，一块使用完之后将其中还存活着的对象复制到另一块上面，然后将当前内存空间块清除掉。缺点是浪费空间，有点事回收速度快，没碎片</p><p>标记-压缩算法：标记所有需要回收的对象，将标记的对象全部移动到一端，完成碎片整理，但并没有回收碎片</p><p>分代收集算法：新生代和老年代，根据不同年代采取最适合的收集算法</p><h1 id="Java对象结构"><a href="#Java对象结构" class="headerlink" title="Java对象结构"></a>Java对象结构</h1><ul><li>对象头<ul><li>自身运行时相关数据<br>  哈希码，GC分代年龄，锁标识状态，线程持有锁状态</li><li>对象的类元数据类型<br>  是一个指针</li></ul></li><li>示例数据<ul><li>对象的有效信息<br>  包括父类继承下来的和自己定义的</li></ul></li><li>对齐填充<ul><li>8字节整数倍<br>  因为Java基本数据类型中字节长度最长的是8个字节</li></ul></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近很不在状态，代码也写得少，新东西也很少接触，总是心不在焉，早上起床就收到敖丙的新文章推送，希望能借这篇文章重新开始学一些东西，走回正轨</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
